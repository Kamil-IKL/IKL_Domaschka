# Напишите программу с использованием механизмов многопоточности, которая создает два потока-рыцаря.
#
# Каждый рыцарь должен иметь имя (name) и умение(skill). Умение рыцаря определяет, сколько времени потребуется рыцарю,
# чтобы выполнить свою защитную миссию для королевства.
# Враги будут нападать в количестве 100 человек. Каждый день рыцарь может ослабить вражеское войско на skill-человек.
# Если у рыцаря skill равен 20, то защищать крепость он будет 5 дней (5 секунд в программе).
# Чем выше умение, тем быстрее рыцарь защитит королевство.

import time
import threading

lock = threading.Lock  # создал замок (пока на всякий случай, пусть будет)


class Knight(threading.Thread):
    def __init__(self, name, skill):
        super().__init__()  # метод вызова всех функций из класса родителя "Thread"
        self.name = name
        self.skill = skill
        global enemy, lock

    def counter_day(self):  # функция счетчика дней, где параметр "skill" - нужен для счетчика умения
        a = 0
        b = enemy
        while True:
            time.sleep(1)
            a += 1
            b -= self.skill
            if 0 <= b < self.skill:  # сделал условие для окончания "сражения"
                print(f'Боец {self.name} победил врагов за {a} дня(дней)')
                break
            else:
                print(f'Боец {self.name} сражается {a} день(дня)..., осталось {b} врагов')

    def run(self):  # переопределяю метод run под свое задание
        if enemy <= 0:  # проверяю "есть враги или нет"
            print(f'Боец {self.name} можешь спать "...в Багдаде все спокойно..."')
        else:
            print(f'Боец {self.name} на нас напали !')
            exit(print(Knight.counter_day(self)))  # вызываю функцию счетчика дней и 
        # print('Все бои закончились ! Ура ... Всех победили !!!'.upper())  # вывод заглавными буквами


enemy = int(input(f'Введите количество нападающих врагов: '))  # сделал запрос на количество врагов
Knight_01 = Knight('Kam', 20)  # создал бойца c умением (число)
Knight_02 = Knight("Rim", 10)  # создал бойца c умением (число)
Knight_01.start()  # запускаю поток по первому бойцу
Knight_02.start()  # запускаю поток по второму бойцу
# print(threading.enumerate())  # проверяю "живые" потоки (сколько потоков работает) на данный момент
Knight_01.join()  # так и не понял для чего он нужен - join()
Knight_02.join()  # так и не понял для чего он нужен - join()
